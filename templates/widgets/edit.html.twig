<!-- Modal -->
<div class="modal fade" id="widget_details" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <form id="create-widget-form">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group col-md-12">
                        <label for="fname">Name</label>
                        <input type="text" class="form-control" id="name" name="name">
                    </div>
                    <div class="form-group col-md-12">
                        <label for="widget">Content</label>
                        <div id="jsoneditor"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-info" id="create-widget">Add new widget</button>
                </div>
            </form>
        </div>
    </div>
</div>


<link href="/plugins/jsoneditor/jsoneditor.min.css" rel="stylesheet" type="text/css">
<script src="/plugins/jsoneditor/jsoneditor.min.js"></script>

<script>

    const schema2 = {
          "$schema": "http://json-schema.org/draft-07/schema#",

          "definitions": {
            "address": {
              "type": "object",
              "properties": {
                "street_address": { "type": "string" },
                "city":           { "enum": ["Washington", "New-York"] },
                "state":          { "type": "string" }
              },
              "required": ["street_address", "city", "state"]
            }
          },

          "type": "object",

          "properties": {
            "billing_address": { "$ref": "#/definitions/address" },
            "shipping_address": { "$ref": "#/definitions/address" }
          }
        };

        const json2 = {
            "shipping_address": {
                "street_address": "1600 Pennsylvania Avenue NW",
                "city": null,
                "state": "DC"
              },
            "billing_address": {
                "street_address": "1st Street SE",
                "city": null,
                "state": "DC"
            }
        };


    const schema = {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Single Element Time Series Widget",
        "description": "Object containing time series widget details",
        "definitions": {
            "segment": {
                "type": "object",
                "properties": {
                    "presentation": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "title": "Segment Name"
                            },
                            "color": {
                                "type": "string",
                                "title": "Segment Color"
                            },
                            "type": {
                                "enum": ["bar"],
                            }
                        },
                    },
                    "data_requirements": {
                        "type": "object",
                        "properties": {
                            "technical_metrics": {
                                "type": "object",
                                "properties": {
                                    "total_img_size": {
                                        "type": "object",
                                        "properties": {
                                            "data_flavor": {
                                                "type": "object",
                                                "properties": {
                                                    "percentile": {
                                                        "title": "Some test title",
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "type": "object",
        "properties": {
            "global": {
                "type": "object",
                "properties": {
                    "presentation": {
                        "title": "Presentation part",
                        "type": "object",
                        "properties": {
                            "render_type": {
                                "title": "Widget Type",
                                "enum": ["time_series", "time_no_series"]
                            },
                            "layout" : {
                                "title": "Layout",
                                "type": "object",
                                "properties": {
                                    "bargap": {
                                        "description": "Bargap",
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "barmode": {
                                        "enum": ["overlay", "overover"]
                                    }
                                }
                            }
                        }
                    },
                    "data_requirements": {
                        "type": "object",
                        "properties": {
                            "period": {
                               "type": "object",
                                "properties": {
                                    "type": {
                                        "title": "Type",
                                        "enum": ["moving"]
                                    },
                                    "start": {
                                        "title": "Start",
                                        "enum": ["30"]
                                    },
                                    "end": {
                                        "Title": "End Date",
                                        "enum": ["now"]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "segments": {
                "type": "object",
                "properties": {
                    "1": {"$ref": "#/definitions/segment"}
                }
            }
        }

    };



    const json = {
            title: 'Total Img Compressed Size',
            global: {
                presentation: {
                    'render_type': 'time_series',
                    'layout' : {
                        bargap: 0,
                        barmode: null
                    }
                },
                data_requirements: {
                    period: {
                        type: 'moving',
                        start: '30',
                        end: 'now',
                    },
                }
            },
            segments: {
                1: {
                    presentation: {
                        name: 'IMG Size',
                        color: '#ff6023',
                        type: null
                    },
                    data_requirements: {
                        technical_metrics: {
                            total_img_size: {
                                data_flavor: {
                                    percentile: "ert"
                                }
                            }
                        }
                    }
                }
            }
        };

    const options = {
        schema: schema,
        mode: 'tree',
        modes: ['code', 'text', 'tree', 'preview'],
    }


    const container = document.getElementById('jsoneditor');
    const editor = new JSONEditor(container, options, json);

    // Once loaded append modal div to body in order to appear above dark background
    $(function(){
        $('body').append($(appData.itemDetailsModalId));
    });

    function validationInit()
    {
        if ( appData.validator )
        {
            appData.validator.destroy();
        }

       /* appData.validator = $(appData.modalFormId).validate({
            rules: {
                name: "required",
                widget: "required",
            },
            submitHandler: function(form) {

                var formData = $(appData.modalFormId).serialize();
                if ( appData.mode == 'edit' )
                {
                    itemActions.saveItem(appData.modalFormId, true);
                }
                else if ( appData.mode == 'add' )
                {
                    itemActions.createItem();
                }
            }
        });*/
    }

    // Need this to provent double modals on same page.
    // Unload page - unload modal
    $('.ajax-link').on('click', function(){
        $(appData.itemDetailsModalId).remove();
    });
</script>